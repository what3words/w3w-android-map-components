name: BuildTest

on:
    push:
      branches:
        - 'task/**'
        - 'bug/**'
        - 'fix/**'
        - 'epic/**'
    pull_request:
      branches:
        - 'staging'

jobs:
  build_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls /dev/kvm

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
            distribution: 'temurin'
            java-version: '17'

      - name: Restore gradle.properties
        env:
          MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
        shell: bash
        run: |
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "MAPBOX_DOWNLOADS_TOKEN=${MAPBOX_DOWNLOADS_TOKEN}">> ~/.gradle/gradle.properties
          cat ~/.gradle/gradle.properties

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Check for SNAPSHOT dependencies in lib
        if: github.event_name == 'pull_request' && github.base_ref == 'staging'
        run: ./gradlew :lib:checkSnapshotDependencies

      - name: Check for SNAPSHOT dependencies in lib-compose
        if: github.event_name == 'pull_request' && github.base_ref == 'staging'
        run: ./gradlew :lib-compose:checkSnapshotDependencies

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses
        run: yes | sdkmanager --licenses || true

      - name: Run Lib Unit Test
        run: ./gradlew lib:testDebugUnitTest

      - name: Upload Lib Test Results
        uses: actions/upload-artifact@v4
        with:
          name: lib-test-results
          path: lib/build/test-results/testDebugUnitTest

      - name: Run Lib Compose Unit Test
        run: ./gradlew lib-compose:jacocoTestReport

      - name: Upload Lib Compose Test Results
        uses: actions/upload-artifact@v4
        with:
          name: lib-compose-test-results
          path: lib-compose/build/reports/jacoco/jacocoTestReport

      - name: Jacoco Report to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: ${{ github.workspace }}/**/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60
          title: ':lobster: Coverage Report'
          update-comment: true
          pass-emoji: ':green_square:'
          fail-emoji: ':red_square:'
          debug-mode: true

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: ${{ github.workspace }}/**/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60

      # Publish Coverage Job Summary  # Optional
      - name: Add Jacocoo report to workflow run summary
        run: |
          echo "| Outcome | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage % | ${{ steps.jacoco_reporter.outputs.coverage_percentage }} |" >> $GITHUB_STEP_SUMMARY
          echo "| :heavy_check_mark: Number of Lines Covered | ${{ steps.jacoco_reporter.outputs.covered_lines }} |" >> $GITHUB_STEP_SUMMARY
          echo "| :x: Number of Lines Missed | ${{ steps.jacoco_reporter.outputs.missed_lines }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Number of Lines | ${{ steps.jacoco_reporter.outputs.total_lines }} |" >> $GITHUB_STEP_SUMMARY